{"/home/travis/build/npmtest/node-npmtest-crontab/test.js":"/* istanbul instrument in package npmtest_crontab */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-crontab/lib.npmtest_crontab.js":"/* istanbul instrument in package npmtest_crontab */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_crontab = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_crontab = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-crontab/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-crontab && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_crontab */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_crontab\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_crontab.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_crontab.rollup.js'] =\n            local.assetsDict['/assets.npmtest_crontab.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_crontab.__dirname + '/lib.npmtest_crontab.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-crontab/node_modules/crontab/lib/index.js":"/**\n * Constants\n */\nconst COMMAND = 'crontab';\n\n/**\n * @ignore\n */\nvar Spawn   = require('child_process').spawn;\nvar _       = require('underscore');\nvar CronJob = require('./CronJob');\n\n/**\n * @class CronTab\n * A JavaScript representation of a user crontab. Each tab has zero or more cron jobs corresponding\n * to the individual lines in the cron syntax.\n * \n * Examples:\n *     new CronTab('bob', function(err, tab) {\n *         if (err) { console.log(err); process.exit(1); }\n *         \n *         console.log(\"bob's tab: \" + tab.render());\n *     });\n *     \n *     new CronTab(function(err, tab) {\n *         if (err) { console.log(err); process.exit(1); }\n *         \n *         console.log(\"current user's tab: \" + tab.render());\n *     });\n * \n * @param {String} __username__\n * @param {Function} __callback__\n */\nfunction CronTab(u, cb) {\n  var self   = this;\n  var user   = u || '';\n  var root   = (process.getuid() == 0);\n  var backup = {lines:[], jobs:[]};\n  var lines  = [];\n  var jobs   = [];\n  \n  load(cb);\n  \n  \n  /**\n   * Provides access to the jobs collection.\n   * \n   * Examples:\n   *     new CronTab(function(err, tab) {\n   *         if (err) { console.log(err); process.exit(1); }\n   *         \n   *         var jobs = tab.jobs((command:'ls -l /', comment:'this should run every night'));\n   *         for (var i = 0; i < jobs.length; i++) {\n   *             console.log(jobs[i].render());\n   *         }\n   *     });\n   *\n   * @param {Object} __[options]__\n   * @return {Array[CronJob]}\n   */\n  this.jobs = function(options) {\n    if (!options) {\n      return jobs.slice();\n    }\n    if (!options.command && !options.comment) {\n      return jobs.slice();\n    }\n\n    var queries = _.keys(options);\n    if (_.without(queries, 'comment', 'command').length > 0) {\n      return [];\n    }\n\n    var results = [];\n    for (var i = 0; i < jobs.length; i++) {\n      var job   = jobs[i];\n      var match = true;\n\n      for (var j = 0; j < queries.length; j++) {\n        var query = queries[j];\n\n        if (!job[query]().match(options[query])) {\n          match = false;\n          break;\n        }\n      }\n\n      if (match) {\n        results.push(job);\n      }\n    }\n    \n    return results;\n  }\n  this.find = this.jobs;\n  /**\n   * Writes the crontab to the system. Saves all information.\n   * \n   * Examples:\n   *     new CronTab(function(err, tab) {\n   *         if (err) { console.log(err); process.exit(1); }\n   *         \n   *         var jobs = tab.jobs({command:'ls -l /'});\n   *         tab.remove(jobs);\n   *         \n   *         tab.save(function(err, tab) {\n   *             if (err) { console.log(err); process.exit(1); }\n   *\n   *             console.log('saved');\n   *         });\n   *     });\n   *\n   * @param {Function} __callback__\n   */\n  this.save = function(cb) {\n    var stdout  = '';\n    var stderr  = '';\n    var args    = makeChildArgs('save');\n    var command = makeChildCommand();\n    var child   = Spawn(command, args);\n\n    child.stdout.setEncoding('utf8');\n    child.stderr.setEncoding('utf8');\n    \n    child.stdout.on('data', function(chunk) {\n      stdout += chunk;\n    });\n    child.stderr.on('data', function(chunk) {\n      stderr += chunk;\n    });\n    child.on('error', function (err) {\n    });\n    child.on('close', function (code) {\n      if (code == 0) {\n        cb && cb(null, self);\n      }\n      else {\n        cb && cb({message:stderr}, self);\n      }\n    });\n    \n    child.stdin.write(this.render());\n    child.stdin.end();\n  }\n  /**\n   * Renders the object to a string as it would be written to the system.\n   * \n   * Examples:\n   *     new CronTab(function(err, tab) {\n   *         if (err) { console.log(err); process.exit(1); }\n   *         \n   *         console.log(tab.render());\n   *     });\n   *\n   * @return {String}\n   */\n  this.render = function() {\n    var tokens = [];\n    \n    for (var i = 0; i < lines.length; i++) {\n      var job = lines[i];\n      \n      if (job.isValid && !job.isValid()) {\n        tokens.push('# ' + job.toString());\n        continue;\n      }\n      \n      tokens.push(job.toString());\n    }\n    \n    return tokens.join('\\n').trim() + '\\n';\n  }\n  /**\n   * Creates a new job with the specified command, comment and date.\n   * \n   * Examples:\n   *     new CronTab(function(err, tab) {\n   *         if (err) { console.log(err); process.exit(1); }\n   *         \n   *         var future = Date.parse('2010/7/11');\n   *         \n   *         tab.create('ls -l /');\n   *         tab.create('ls -l /', 'just a silly example');\n   *         tab.create('ls -l /', 'just a silly example', future);\n   *     });\n   *\n   * @param {String} __command__\n   * @param {String|Date} __[when]__\n   * @param {String} __[comment]__\n   * @return {CronJob|null}\n   */\n  this.create = function(command, when, comment) {\n    if (when && !_.isString(when) && !_.isDate(when)) {\n      return null;\n    }\n\n    command = (command || '').trim();\n    comment = (comment || '').trim();\n\n    var job = null;\n    if (_.isString(when)) {\n      job = makeJob(when + ' ' + command + ' #' + comment);\n    }\n    else {\n      job = makeJob(null, command, comment);\n    }\n\n    if (job && _.isDate(when)) {\n      job.minute().on(when.getMinutes());\n      job.hour().on(when.getHours());\n      job.dom().on(when.getDate());\n      job.month().on(when.getMonth()+1);\n    }\n\n    if (job) {\n      jobs.push(job);\n      lines.push(job);\n    }\n\n    return job;\n  }\n  /**\n   * Parses a raw crontab line and returns a CronJob object\n   *\n   * @param {String} __line__\n   * @return {CronJob|null}\n   */\n  this.parse = function(line) {\n    return makeJob(line);\n  }\n  /**\n   * Removes the specified jobs from the crontab.\n   * \n   * Examples:\n   *     new CronTab(function(err, tab) {\n   *         if (err) { console.log(err); process.exit(1); }\n   *         \n   *         var jobs = tab.jobs({command:'ls -l /'});\n   *         tab.remove(jobs);\n   *     });\n   *\n   * @param {String} __Array[CronJob]__\n   */\n  this.remove = function(jobs) {\n    if (jobs instanceof CronJob) {\n      jobs = [jobs];\n    }\n    else if (_.isArray(jobs)) {\n      // do nothing, we do this because _.isObject([]) == true\n    }\n    else if (_.isObject(jobs)) {\n      // jobs is actually search options\n      jobs = this.jobs(jobs);\n    }\n    else {\n      jobs = [];\n    }\n    \n    for (var i = 0; i < jobs.length; i++) {\n      remove(jobs[i]);\n    }\n    \n    truncateLines();\n  }\n  /**\n   * Restores this crontab to its original state.\n   * \n   * Examples:\n   *     new CronTab(function(err, tab) {\n   *         if (err) { console.log(err); process.exit(1); }\n   *         \n   *         var jobs = tab.jobs({command:'ls -l /'});\n   *         tab.remove(jobs);\n   *         tab.reset();\n   *     });\n   */\n  this.reset = function() {\n    lines = backup.lines.slice();\n    jobs  = backup.jobs.slice();\n  }\n  \n  \n  /**\n   * Loads the system crontab into this object.\n   *\n   * @param {function} __callback__\n   * \n   * @api private\n   */\n  function load(cb) {\n    var stdout  = '';\n    var stderr  = '';\n    var args    = makeChildArgs('load');\n    var command = makeChildCommand();\n    var child   = Spawn(command, args);\n    \n    jobs  = [];\n    lines = [];\n    \n    child.stdout.setEncoding('utf8');\n    child.stderr.setEncoding('utf8');\n\n    child.stdout.on('data', function(chunk) {\n      stdout += chunk;\n    });\n    child.stderr.on('data', function(chunk) {\n      stderr += chunk;\n    });\n    child.on('error', function (err) {\n    });\n    child.on('close', function (code) {\n      if (code != 0 && stderr.indexOf('no crontab for ') < 0) {\n        cb && cb({message:stderr}, null);\n        return;\n      }\n      \n      var tokens = stdout.split('\\n');\n      for (var i = 0; i < tokens.length; i++) {\n        var token = tokens[i];\n        var job   = makeJob(token);\n        \n        if (job != null && job.isValid()) {\n          jobs.push(job);\n          lines.push(job);\n        }\n        else {\n          lines.push(token);\n        }\n      }\n      \n      truncateLines();\n      \n      backup.lines = lines.slice();\n      backup.jobs  = jobs.slice();\n      \n      cb && cb(null, self); \n    });\n  }\n  /**\n   * Removes the specified job from the crontab.\n   *\n   * @param {CronJob} __job__\n   * \n   * @api private\n   */\n  function remove(job) {\n    var oldJobs  = jobs;\n    var oldLines = lines;\n    \n    jobs  = [];\n    lines = [];\n    \n    for (var i = 0; i < oldJobs.length; i++) {\n      var oldJob = oldJobs[i];\n      \n      if (oldJob != job) {\n        jobs.push(oldJob);\n      }\n    }\n    for (var i = 0; i < oldLines.length; i++) {\n      var oldLine = oldLines[i];\n      \n      if (oldLine != job) {\n        lines.push(oldLine);\n      }\n    }\n  }\n  /**\n   * Creates an array of CL arguments for the system \"crontab\" command. Intended to be passed to\n   * child_process.spawn.\n   *\n   * @param {String} __action__ 'load' | 'save'\n   * \n   * @api private\n   */\n  function makeChildArgs(action) {\n    var args = [];\n    if (user) {\n      args = args.concat('-u', user);\n    }\n    \n    if (action == 'load') {\n      args.push('-l');\n    }\n    if (action == 'save' && process.platform !== 'sunos') {\n      args.push('-');\n    }\n    \n    return args;\n  }\n  /**\n   * Creates a system command string to run crontab. Intended to be passed to\n   * child_process.spawn. If this is going to run for another user and the\n   * current user is not root, we prefix the command with sudo.\n   * \n   * @api private\n   */\n  function makeChildCommand() {\n    var command = COMMAND;\n    if (user.length > 0 && root == false) {\n      command = 'sudo ' + command;\n    }\n    \n    return command;\n  }\n  /**\n   * Creates a new job. This method exists to catch instantiation exceptions.\n   * @see CronJob\n   *\n   * @param {String|null} __line__\n   * @param {String} __[command]__\n   * @param {String} __[comment]__\n   * \n   * @api private\n   */\n  function makeJob(line, command, comment) {\n    try {\n      var job = new CronJob(line, command, comment);\n      if (!job || !job.isValid()) {\n        throw 'invalid job';\n      }\n\n      return job;\n    } catch(e) {}\n\n    return null;\n  }\n  /**\n   * Compacts the line collection by removes empty lines from the end.\n   * \n   * @api private\n   */\n  function truncateLines() {\n    var undefined;\n    var line = lines.pop();\n    \n    while (line != undefined && line.toString().trim() == '') {\n      line = lines.pop();\n    }\n    \n    if (line != undefined) {\n      lines.push(line);\n    }\n  }\n}\n\n\n// public API\nmodule.exports = {\n  load:function() {\n    if (_.isString(arguments[0]) && _.isFunction(arguments[1])) {\n      new CronTab(arguments[0], arguments[1]);\n    }\n    else if (_.isFunction(arguments[0])) {\n      new CronTab('', arguments[0]);\n    }\n  }\n};\n\n\n","/home/travis/build/npmtest/node-npmtest-crontab/node_modules/crontab/lib/CronJob.js":"/**\n * Constants\n */\nconst ITEMREX = /^\\s*([^@#\\s]+)\\s+([^@#\\s]+)\\s+([^@#\\s]+)\\s+([^@#\\s]+)\\s+([^@#\\s]+)\\s+([^#\\n]*)(\\s+#\\s*([^\\n]*)|$)/;\nconst SPECREX = /@(\\w+)\\s([^#\\n]*)(\\s+#\\s*([^\\n]*)|$)/;\n\nconst SPECIALS = {\n  'reboot'   : '@reboot',\n  'hourly'   : '0 * * * *',\n  'daily'    : '0 0 * * *',\n  'weekly'   : '0 0 * * 0',\n  'monthly'  : '0 0 1 * *',\n  'yearly'   : '0 0 1 1 *',\n  'annually' : '0 0 1 1 *',\n  'midnight' : '0 0 * * *'\n};\n\nconst MONTH_ENUM = ['jan','feb','mar','apr','may','jun','jul','aug','sep','oct','nov','dec'];\nconst WEEK_ENUM = ['sun','mon','tue','wed','thu','fri','sat','sun'];\nconst SINFO = [\n  { 'name' : 'Minute',       'max' : 59, 'min' : 0 },\n  { 'name' : 'Hours',        'max' : 23, 'min' : 0 },\n  { 'name' : 'Day of Month', 'max' : 31, 'min' : 1 },\n  { 'name' : 'Month',        'max' : 12, 'min' : 1, 'enumm' : MONTH_ENUM },\n  { 'name' : 'Day of Week',  'max' : 7,  'min' : 0, 'enumm' : WEEK_ENUM },\n];\n\n/**\n * Imports\n */\nvar TimeSlot    = require('./TimeSlot');\nvar CronCommand = require('./CronCommand');\nvar CronComment = require('./CronComment');\n\n/**\n * @class CronJob\n * A JavaScript representation of a cron job. Each job has exactly 5 time slots as per cron sytax:\n * _minute_, _hour_, _day-of-the-month_, _month_, _day-of-the-week_.\n * \n * Examples:\n *     var job1 = new CronJob('* * * * * ls -l / #comment');\n *     var job2 = new CronJob(null, 'ls -l /', 'comment');\n *\n * @param {String|null} __line__\n * @param {String} __[command]__\n * @param {String} __[comment]__\n */\nfunction CronJob(line, c, m) {\n  var self    = this;\n  var command = null;\n  var comment = null;\n  var valid   = false;\n  var slots   = [];\n  var special = false;\n  \n  \n  /**\n   * Returns true if this cron job is valid.\n   * \n   * Examples:\n   *     new CronTab(function(err, tab) {\n   *         if (err) { console.log(err); process.exit(1); }\n   *         \n   *         var jobs = tab.jobs({command:'ls -l /'});\n   *         for (var i = 0; i < jobs.length; i++) {\n   *             console.log(jobs[i].isValid());\n   *         }\n   *     });\n   *\n   * @return {Boolean}\n   */\n  this.isValid = function() {\n    return valid;\n  }\n  /**\n   * Renders the object to a string as it would be written to the system.\n   * \n   * Examples:\n   *     new CronTab(function(err, tab) {\n   *         if (err) { console.log(err); process.exit(1); }\n   *         \n   *         var jobs = tab.jobs({command:'ls -l /'});\n   *         for (var i = 0; i < jobs.length; i++) {\n   *             console.log(jobs[i].render());\n   *         }\n   *     });\n   *\n   * @return {String}\n   */\n  this.render = function() {\n    var time = '';\n    \n    if (special) {\n      time = special;\n    }\n    else {\n      var tokens = [];\n      \n      for (var i = 0; i < 5; i++) {\n        tokens.push(slots[i].toString());\n      }\n      \n      time = tokens.join(' ');\n    }\n    \n    var keys    = getKeys.call(SPECIALS);\n    var vals    = getVals.call(SPECIALS);\n    var timeIdx = vals.indexOf(time);\n    \n    if (timeIdx >=0 ) {\n      time = '@' + keys[timeIdx];\n    }\n    \n    var result = time + ' ' + command.toString();\n    if (comment.toString() != '') {\n      result += ' #' + comment.toString();\n    }\n    \n    return result;\n  }\n  /**\n   * Clears all time slots. Calling this method amounts to setting the time to '* * * * *'.\n   * \n   * Examples:\n   *     new CronTab(function(err, tab) {\n   *         if (err) { console.log(err); process.exit(1); }\n   *         \n   *         var jobs = tab.jobs({command:'ls -l /'});\n   *         for (var i = 0; i < jobs.length; i++) {\n   *             console.log(jobs[i].clear());\n   *         }\n   *     });\n   */\n  this.clear = function() {\n    special = false;\n    \n    for (var i = 0; i < slots.length; i++) {\n      slots[i].clear();\n    }\n  }\n  /**\n   * Returns the minute time slot.\n   * \n   * Examples:\n   *     new CronTab(function(err, tab) {\n   *         if (err) { console.log(err); process.exit(1); }\n   *         \n   *         var jobs = tab.jobs({command:'ls -l /'});\n   *         for (var i = 0; i < jobs.length; i++) {\n   *             console.log(jobs[i].minute().render());\n   *         }\n   *     });\n   *\n   * @return {TimeSlot}\n   */\n  this.minute = function() {\n    return slots[0];\n  }\n  /**\n   * Returns the hour time slot.\n   * \n   * Examples:\n   *     new CronTab(function(err, tab) {\n   *         if (err) { console.log(err); process.exit(1); }\n   *         \n   *         var jobs = tab.jobs({command:'ls -l /'});\n   *         for (var i = 0; i < jobs.length; i++) {\n   *             console.log(jobs[i].hour().render());\n   *         }\n   *     });\n   *\n   * @return {TimeSlot}\n   */\n  this.hour = function() {\n    return slots[1];\n  }\n  /**\n   * Returns the day-of-the-month time slot.\n   * \n   * Examples:\n   *     new CronTab(function(err, tab) {\n   *         if (err) { console.log(err); process.exit(1); }\n   *         \n   *         var jobs = tab.jobs({command:'ls -l /'});\n   *         for (var i = 0; i < jobs.length; i++) {\n   *             console.log(jobs[i].dom().render());\n   *         }\n   *     });\n   *\n   * @return {TimeSlot}\n   */\n  this.dom = function() {\n    return slots[2];\n  }\n  /**\n   * Returns the month time slot.\n   * \n   * Examples:\n   *     new CronTab(function(err, tab) {\n   *         if (err) { console.log(err); process.exit(1); }\n   *         \n   *         var jobs = tab.jobs({command:'ls -l /'});\n   *         for (var i = 0; i < jobs.length; i++) {\n   *             console.log(jobs[i].month().render());\n   *         }\n   *     });\n   *\n   * @return {TimeSlot}\n   */\n  this.month = function() {\n    return slots[3];\n  }\n  /**\n   * Returns the day-of-the-week time slot.\n   * \n   * Examples:\n   *     new CronTab(function(err, tab) {\n   *         if (err) { console.log(err); process.exit(1); }\n   *         \n   *         var jobs = tab.jobs({command:'ls -l /'});\n   *         for (var i = 0; i < jobs.length; i++) {\n   *             console.log(jobs[i].dow().render());\n   *         }\n   *     });\n   *\n   * @return {TimeSlot}\n   */\n  this.dow = function() {\n    return slots[4];\n  }\n  /**\n   * Command getter/setter.\n   * \n   * Examples:\n   *     new CronTab(function(err, tab) {\n   *         if (err) { console.log(err); process.exit(1); }\n   *         \n   *         var jobs = tab.jobs({command:'ls -l /'});\n   *         for (var i = 0; i < jobs.length; i++) {\n   *             console.log(jobs[i].command('new command'));\n   *         }\n   *     });\n   *\n   * @param {String} __[command]__\n   * @return {String}\n   */\n  this.command = function(c) {\n    if (c) {\n      command = new CronCommand(c.toString());\n    }\n    \n    return command.toString();\n  }\n  /**\n   * Comment getter/setter.\n   * \n   * Examples:\n   *     new CronTab(function(err, tab) {\n   *         if (err) { console.log(err); process.exit(1); }\n   *         \n   *         var jobs = tab.jobs({command:'ls -l /'});\n   *         for (var i = 0; i < jobs.length; i++) {\n   *             console.log(jobs[i].comment('new comment'));\n   *         }\n   *     });\n   *\n   * @param {String} __[comment]__\n   * @return {String}\n   */\n  this.comment = function(c) {\n    if (c) {\n      comment = new CronComment(c.toString());\n    }\n    \n    return comment.toString();\n  }\n  /**\n   * Renders the object to a string as it would be written to the system. See __render__.\n   * \n   * Examples:\n   *     new CronTab(function(err, tab) {\n   *         if (err) { console.log(err); process.exit(1); }\n   *         \n   *         var jobs = tab.jobs({command:'ls -l /'});\n   *         for (var i = 0; i < jobs.length; i++) {\n   *             console.log(jobs[i].toString());\n   *         }\n   *     });\n   *\n   * @return {String}\n   */\n  this.toString = function() {\n    return this.render();\n  }\n  \n  \n  /**\n   * Populates the time slots with TimeSlot objects. Call this method ONLY from __init__!\n   *\n   * @param {Array[String]} __[tokens]__ string tokens to parse\n   * \n   * @api private\n   */\n  function setSlots(tokens) {\n    slots = [];\n    \n    for (var i = 0; i < 5; i++) {\n      var info  = SINFO[i];\n      var value = (tokens && tokens[i] || null);\n      var name  = info.name;\n      var min   = info.min;\n      var max   = info.max;\n      var enumm = info.enumm;\n      var slot  = new TimeSlot(name, min, max, enumm, value);\n      \n      slots.push(slot);\n    }\n  }\n  /**\n   * Initializes a new CronJob object.\n   *\n   * @api private\n   */\n  function init() {\n    setSlots();\n    \n    if (line) {\n      var result = line.match(ITEMREX);\n      \n      if (result && result.length > 0) {\n        command = new CronCommand(result[6]);\n        comment = new CronComment(result[8] || '');\n        valid   = true;\n        \n        setSlots(result.slice(1,6));\n      }\n      else if (line.indexOf('@') < line.indexOf('#') || line.indexOf('#') == -1) {\n        var result = line.match(SPECREX);\n        \n        if (result && result.length > 0 && SPECIALS[result[1]]) {\n            command = new CronCommand(result[2]);\n            comment = new CronComment(result[4] || '');\n            \n            var value = SPECIALS[result[1]];\n            if (value.indexOf('@') >= 0) {\n              special = value;\n            }\n            else {\n              setSlots(value.split(' '));\n            }\n            valid = true;\n        }\n      }\n    }\n    else if (c) {\n      valid   = true;\n      command = new CronCommand(c && c.toString() || '');\n      comment = new CronComment(m && m.toString() || '');\n    }\n    else {\n      throw 'Expected either a canonical crontab line or a command string';\n    }\n  }\n  \n  init();\n}\n\n/* @api private */\nfunction getKeys() {\n  return Object.keys(this);\n}\n\nfunction getVals() {\n  var keys = getKeys.call(this);\n  var vals = [];\n  \n  for (var i = 0; i < keys.length; i++) {\n    var key = keys[i];\n    vals.push(this[key]);\n  }\n  \n  return vals;\n}\n\nmodule.exports = CronJob;\n","/home/travis/build/npmtest/node-npmtest-crontab/node_modules/crontab/lib/TimeSlot.js":"/**\n * Imports\n */\nvar TimeRange = require('./TimeRange');\n\n/**\n * @class TimeSlot\n * A JavaScript representation of a time slot (e.g. minute, hour, month). Each slot has zero or\n * more time ranges coresponding to the comma separated list in the cron sytax \n * (e.g. _* / 4_, _10_, 5-15/2).\n * \n * Examples:\n *     var enumm = ['jan','feb','mar','apr',\n *                 'may','jun','jul','aug',\n *                 'sep','oct','nov','dec'];\n *\n *     var slot1 = new TimeSlot('Month', 1, 12, enumm);\n *     var slot2 = new TimeSlot('Minute', 0, 59, null, '');\n *\n * @param {String} __name__ (e.g 'Minute', 'Month')\n * @param {Number} __min__ minimum value\n * @param {Number} __max__ maximum value\n * @param {Object|null} __enumm__ an object enumerating all possible values\n * @param {String|null} __value__ a value to parse (e.g '19-0/2,0-3')\n */\nfunction TimeSlot(name, min, max, enumm, value) {\n  var self  = this;\n  var name  = name;\n  var min   = min;\n  var max   = max;\n  var enumm = enumm;\n  var parts = [];\n  \n  \n  /**\n   * Returns the minimum value for this time slot.\n   * \n   * Examples:\n   *     new CronTab(function(err, tab) {\n   *         if (err) { console.log(err); process.exit(1); }\n   *         \n   *         var jobs = tab.jobs({command:'ls -l /'});\n   *         for (var i = 0; i < jobs.length; i++) {\n   *             console.log(jobs[i].month().getMin());\n   *         }\n   *     });\n   *\n   * @return {Number}\n   */\n  this.getMin = function() {\n    return min;\n  }\n  /**\n   * Returns the maximum value for this time slot.\n   * \n   * Examples:\n   *     new CronTab(function(err, tab) {\n   *         if (err) { console.log(err); process.exit(1); }\n   *         \n   *         var jobs = tab.jobs({command:'ls -l /'});\n   *         for (var i = 0; i < jobs.length; i++) {\n   *             console.log(jobs[i].month().getMax());\n   *         }\n   *     });\n   *\n   * @return {Number}\n   */\n  this.getMax = function() {\n    return max;\n  }\n  /**\n   * Returns the allowed value enumeration for this time slot.\n   * \n   * Examples:\n   *     new CronTab(function(err, tab) {\n   *         if (err) { console.log(err); process.exit(1); }\n   *         \n   *         var jobs = tab.jobs({command:'ls -l /'});\n   *         for (var i = 0; i < jobs.length; i++) {\n   *             console.log(jobs[i].month().getEnum());\n   *         }\n   *     });\n   *\n   * @return {Object}\n   */\n  this.getEnum = function() {\n    return enumm;\n  }\n  /**\n   * Renders the object to a string as it would be written to the system.\n   * \n   * Examples:\n   *     new CronTab(function(err, tab) {\n   *         if (err) { console.log(err); process.exit(1); }\n   *         \n   *         var jobs = tab.jobs({command:'ls -l /'});\n   *         for (var i = 0; i < jobs.length; i++) {\n   *             console.log(jobs[i].month().render());\n   *         }\n   *     });\n   *\n   * @return {Object}\n   */\n  this.render = function() {\n    return parts.map(function(part) {\n      return part.toString();\n    }).join(',') || '*';\n  }\n  /**\n   * Set this time slot to repeat every n units e.g. _* / n_\n   * \n   * Examples:\n   *     new CronTab(function(err, tab) {\n   *         if (err) { console.log(err); process.exit(1); }\n   *         \n   *         var jobs = tab.jobs({command:'ls -l /'});\n   *         for (var i = 0; i < jobs.length; i++) {\n   *             // every other month\n   *             jobs[i].month().every(2);\n   *         }\n   *     });\n   *\n   * @param {Number} __number__\n   * @return {TimeRange}\n   */\n  this.every = function(n) {\n    try {\n      var range = new TimeRange(self, '*/' + parseInt(n));\n      parts.push(range);\n      \n      return range;\n    }\n    catch (e) {}\n    \n    return null;\n  }\n  /**\n   * Set this time slot to repeat exactly at the specified values e.g. _0,12_\n   * \n   * Examples:\n   *     new CronTab(function(err, tab) {\n   *         if (err) { console.log(err); process.exit(1); }\n   *         \n   *         var jobs = tab.jobs({command:'ls -l /'});\n   *         for (var i = 0; i < jobs.length; i++) {\n   *             // at midnight and noon\n   *             jobs[i].hour().on(0, 12);\n   *             jobs[i].minute().on(0);\n   *         }\n   *     });\n   *\n   * @param {Number} __value+__ one or more values\n   * @return {TimeRange}\n   */\n  this.on = function() {\n    for (var i = 0; i < arguments.length; i++) {\n      parts.push(arguments[i]);\n    }\n  }\n  /**\n   * Set this time slot to repeat exactly at the specified values e.g. _0,12_\n   * \n   * Examples:\n   *     new CronTab(function(err, tab) {\n   *         if (err) { console.log(err); process.exit(1); }\n   *         \n   *         var jobs = tab.jobs({command:'ls -l /'});\n   *         for (var i = 0; i < jobs.length; i++) {\n   *             // at midnight and noon\n   *             jobs[i].hour().on(0, 12);\n   *             jobs[i].minute().on(0);\n   *         }\n   *     });\n   *\n   * @param {Number} __value+__ one or more values\n   * @return {TimeRange}\n   */\n  this.at = this.on;\n  this.in = this.on;\n  /**\n   * Set this time slot to repeat between from and to e.g. _from - to_\n   * \n   * Examples:\n   *     new CronTab(function(err, tab) {\n   *         if (err) { console.log(err); process.exit(1); }\n   *         \n   *         var jobs = tab.jobs({command:'ls -l /'});\n   *         for (var i = 0; i < jobs.length; i++) {\n   *             // business hours\n   *             jobs[i].hour().between(9, 17);\n   *         }\n   *     });\n   *\n   * @param {Number} __from__\n   * @param {Number} __to__\n   * @return {TimeRange}\n   */\n  this.between = function(from, to) {\n    try {\n      var range = new TimeRange(self, from + '-' + to);\n      parts.push(range);\n      \n      return range;\n    }\n    catch (e) {}\n    \n    return null;\n  }\n  /**\n   * Clears this time slot. Calling this method amounts to setting the slot to '*'.\n   * \n   * Examples:\n   *     new CronTab(function(err, tab) {\n   *         if (err) { console.log(err); process.exit(1); }\n   *         \n   *         var jobs = tab.jobs({command:'ls -l /'});\n   *         for (var i = 0; i < jobs.length; i++) {\n   *             console.log(jobs[i].month().clear());\n   *         }\n   *     });\n   */\n  this.clear = function() {\n    parts = [];\n  }\n  /**\n   * Renders the object to a string as it would be written to the system. See __render__.\n   * \n   * Examples:\n   *     new CronTab(function(err, tab) {\n   *         if (err) { console.log(err); process.exit(1); }\n   *         \n   *         var jobs = tab.jobs({command:'ls -l /'});\n   *         for (var i = 0; i < jobs.length; i++) {\n   *             console.log(jobs[i].month().toString());\n   *         }\n   *     });\n   *\n   * @return {String}\n   */\n  this.toString = function() {\n    return this.render();\n  }\n  \n  \n  /**\n   * Initializes a new TimeSlot object.\n   *\n   * @api private\n   */\n  function init() {\n    if (value) {\n      var tokens = value.split(',');\n      for (var i = 0; i < tokens.length; i++) {\n        var token = tokens[i];\n        \n        if (token.indexOf('/') > 0 || token.indexOf('-') > 0 || token == '*') {\n          var range = new TimeRange(self, token);\n          parts.push(range);\n        }\n        else {\n          var lPart    = token.toLowerCase();\n          var enummIdx = (enumm || []).indexOf(lPart);\n          \n          if (enummIdx >= 0) {\n            token = enummIdx;\n          }\n              \n          var iPart = parseInt(token);\n          if (iPart !== iPart) {\n            throw {message:'Unknown cron time part for ' + name + ': ' + token};\n          }\n          \n          parts.push(iPart);\n        }\n      }\n    }\n  }\n  \n  init();\n}\n\nmodule.exports = TimeSlot;\n","/home/travis/build/npmtest/node-npmtest-crontab/node_modules/crontab/lib/TimeRange.js":"/**\n * @class TimeRange\n * A JavaScript representation of a time range. Each range has a _from_, _to_, and _step_ values.\n * \n * Examples:\n *     var enumm = ['jan','feb','mar','apr',\n *                 'may','jun','jul','aug',\n *                 'sep','oct','nov','dec'];\n *\n *     var slot   = new TimeSlot('Month', 1, 12, enumm);\n *     var range1 = new TimeRange(slot, '* / 2'); // every other month\n *     var range2 = new TimeRange(slot, 'jun - sep'); // every summer\n *\n * @param {TimeSlot} __slot__ The owner time slot object\n * @param {String} __range__ The range string e.g. _* / 2_, _jun - sep_\n */\nfunction TimeRange(s, range) {\n  var self  = this;\n  var slot  = s;\n  var from  = null;\n  var to    = null;\n  var step  = 1;\n  \n  \n  /**\n   * Renders the object to a string as it would be written to the system.\n   * \n   * Examples:\n   *     new CronTab(function(err, tab) {\n   *         if (err) { console.log(err); process.exit(1); }\n   *         \n   *         var jobs = tab.jobs({command:'ls -l /'});\n   *         for (var i = 0; i < jobs.length; i++) {\n   *             console.log(jobs[i].hour().between(9, 17).render());\n   *         }\n   *     });\n   *\n   * @return {String}\n   */\n  this.render = function() {\n    var value = '*';\n    \n    if (from > slot.getMin() || to < slot.getMax()) {\n      value = from + '-' + to;\n    }\n    if (step != 1) {\n      value += '/' + step;\n    }\n    \n    return value;\n  }\n  /**\n   * Set the step value for this range.\n   * \n   * Examples:\n   *     new CronTab(function(err, tab) {\n   *         if (err) { console.log(err); process.exit(1); }\n   *         \n   *         var jobs = tab.jobs({command:'ls -l /'});\n   *         for (var i = 0; i < jobs.length; i++) {\n   *             // every other business hour\n   *             jobs[i].hour().between(9, 17).every(2);\n   *         }\n   *     });\n   */\n  this.every = function(value) {\n    step = parseInt(value);\n  }\n  /**\n   * Renders the object to a string as it would be written to the system. See __render__.\n   * \n   * Examples:\n   *     new CronTab(function(err, tab) {\n   *         if (err) { console.log(err); process.exit(1); }\n   *         \n   *         var jobs = tab.jobs({command:'ls -l /'});\n   *         for (var i = 0; i < jobs.length; i++) {\n   *             console.log(jobs[i].hour().between(9, 17).toString());\n   *         }\n   *     });\n   *\n   * @return {String}\n   */\n  this.toString = function() {\n    return this.render();\n  }\n  \n  \n  /**\n   * Converts a string value representing a range limit to an integer.\n   *\n   * @param {String} __value__ e.g. _5_,_mon_,_jan_\n   * @return {Number}\n   *\n   * @api private\n   */\n  function cleanValue(value) {\n    var sValue   = String(value);\n    var lValue   = sValue.toLowerCase();\n    var enummIdx = (slot.getEnum() || []).indexOf(lValue);\n    \n    if (enummIdx >= 0) {\n      value = enummIdx;\n    }\n    \n    var iValue = parseInt(value);\n    if (iValue >= slot.getMin() && iValue <= slot.getMax()) {\n      return iValue\n    }\n    \n    return null;\n  }\n  \n  /**\n   * Initializes a new TimeRange object.\n   *\n   * @api private\n   */\n  function init() {\n    if (!range) {\n      range = '*';\n    }\n    \n    if (range.indexOf('/') > 0) {\n      var tokens = range.split('/');\n      \n      range = tokens[0];\n      step  = tokens[1];\n    }\n    \n    if (range.indexOf('-') > 0) {\n      var tokens = range.split('-');\n      \n      from = cleanValue(tokens[0]);\n      to   = cleanValue(tokens[1]);\n      \n      if (from == null) {\n        throw {message:'Invalid range value ' + tokens[0]};\n      }\n      else if (to == null) {\n        throw {message:'Invalid range value ' + tokens[1]};\n      }\n    }\n    else if (range == '*') {\n      from = slot.getMin();\n      to   = slot.getMax();\n    }\n    else {\n      throw {message:'Unknown time range value ' + range};\n    }\n  }\n  \n  init();\n}\n\nmodule.exports = TimeRange;\n","/home/travis/build/npmtest/node-npmtest-crontab/node_modules/crontab/lib/CronCommand.js":"/**\n * @class CronCommand\n * A JavaScript representation of the command part of a cron job.\n * \n * Examples:\n *     var command = new CronCommand('ls -l /');\n *\n * @param {String} __line__\n */\nfunction CronCommand(line) {\n  var command = line;\n  \n  \n  /**\n   * Returns true if the pattern that was passed matches this command.\n   * \n   * Examples:\n   *     new CronTab(function(err, tab) {\n   *         if (err) { console.log(err); process.exit(1); }\n   *         \n   *         var jobs = tab.jobs({command:'ls -l /'});\n   *         for (var i = 0; i < jobs.length; i++) {\n   *             // true\n   *             console.log(jobs[i].command().match('ls -l /'));\n   *         }\n   *     });\n   *\n   * @param {String|RegEx} __pattern__\n   * @return {Boolean}\n   */\n  this.match = function(pattern) {\n    if (_.isString(pattern) && !!~command.indexOf(pattern)) {\n      return true;\n    }\n    if (_.isRegExp(pattern)) {\n      return pattern.test(command);\n    }\n    \n    return false;\n  }\n  /**\n   * Renders the object to a string as it would be written to the system.\n   * \n   * Examples:\n   *     new CronTab(function(err, tab) {\n   *         if (err) { console.log(err); process.exit(1); }\n   *         \n   *         var jobs = tab.jobs({command:'ls -l /'});\n   *         for (var i = 0; i < jobs.length; i++) {\n   *             console.log(jobs[i].command().toString());\n   *         }\n   *     });\n   *\n   * @return {String}\n   */\n  this.toString = function() {\n    return command;\n  }\n}\n\nmodule.exports = CronCommand;\n","/home/travis/build/npmtest/node-npmtest-crontab/node_modules/crontab/lib/CronComment.js":"/**\n * @class CronComment\n * A JavaScript representation of the inline comment part of a cron job.\n * \n * Examples:\n *     var comment = new CronComment('run this on the weekend');\n *\n * @param {String} __line__\n */\nfunction CronComment(line) {\n  var comment = line;\n  \n  \n  /**\n   * Returns true if the pattern that was passed matches this comment.\n   * \n   * Examples:\n   *     new CronTab(function(err, tab) {\n   *         if (err) { console.log(err); process.exit(1); }\n   *         \n   *         var jobs = tab.jobs({comment:'run this on the weekend'});\n   *         for (var i = 0; i < jobs.length; i++) {\n   *             // true\n   *             console.log(jobs[i].comment().match('run this on the weekend'));\n   *         }\n   *     });\n   *\n   * @param {String|RegEx} __pattern__\n   * @return {Boolean}\n   */\n  this.match = function(pattern) {\n    if (_.isString(pattern) && !!~command.indexOf(pattern)) {\n      return true;\n    }\n    if (_.isRegExp(pattern)) {\n      return pattern.test(comment);\n    }\n    \n    return false;\n  }\n  /**\n   * Renders the object to a string as it would be written to the system.\n   * \n   * Examples:\n   *     new CronTab(function(err, tab) {\n   *         if (err) { console.log(err); process.exit(1); }\n   *         \n   *         var jobs = tab.jobs({comment:'run this on the weekend'});\n   *         for (var i = 0; i < jobs.length; i++) {\n   *             console.log(jobs[i].comment().toString());\n   *         }\n   *     });\n   *\n   * @return {String}\n   */\n  this.toString = function() {\n    return comment;\n  }\n}\n\nmodule.exports = CronComment;\n"}